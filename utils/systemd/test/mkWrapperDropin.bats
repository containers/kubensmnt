#!/usr/bin/env bats
# vim:set ft=bash :
# shellcheck disable=2030,2031
# ^- Disable checks around exports within subshells; that's how these tests must work

type bats_require_minimum_version &>/dev/null && \
  bats_require_minimum_version 1.5.0

DIR="$( cd "$( dirname "$BATS_TEST_FILENAME" )" >/dev/null 2>&1 && pwd )"

function setup() {
    TESTDIR=$(mktemp -d)
    MOCKS=$TESTDIR/mocks
    mkdir -p "$MOCKS"
    # Ensure mkWrapperDropin (in the parent directory) is in the path, and set up a mock path first
    export PATH="$MOCKS:$DIR/..:$PATH"

    export SYSTEMD_BASE="$TESTDIR/systemd/system"
    mkdir -p "$SYSTEMD_BASE"

    # Set up the 'systemctl cat' mock
    cat >"$MOCKS/systemctl" <<'EOF'
#!/bin/bash
set -e
shopt -s nullglob
DIR=$(dirname "$0")
if [[ $1 != cat ]]; then
    echo "$1 not supported by this mock"
    exit 1
fi
echo "# $SYSTEMD_BASE/$2"
cat "$SYSTEMD_BASE/$2"
if [[ -d $SYSTEMD_BASE/$2.d ]]; then
    for dropin in $SYSTEMD_BASE/$2.d/*; do
        echo
        echo "# $dropin"
        cat "$dropin"
    done
fi
EOF
    chmod +x "$MOCKS/systemctl"

    # Set up fake kubensenter mock
    export KUBENSENTER="$MOCKS/kubensenter"
    touch "$KUBENSENTER"
    chmod +x "$KUBENSENTER"

    EXPECTED_WRAPPER="99-kubens-wrapper.conf"
}

function teardown() {
    set +x
    rm -rf "$TESTDIR"
}

function mkService() {
    local service=$1
    cat >"$SYSTEMD_BASE/$service"
}

function mkDropin() {
    local service=$1
    local dropin=$2
    mkdir -p "$SYSTEMD_BASE/$service.d"
    cat >"$SYSTEMD_BASE/$service.d/$dropin"
}

function assertWrapperFor() {
    local service=$1
    local content=$2
    local wrapper="$SYSTEMD_BASE/${service}.d/$EXPECTED_WRAPPER"
    set -x
    [[ -e $wrapper ]]
    grep -q -- "^# Generated by" "$wrapper"
    grep -q -- "^After=kubens.service" "$wrapper"
    grep -q -- "^ExecStart=$KUBENSENTER \\\\
    $content" "$wrapper"
    set +x
}

@test "Test functions" {
    mkService simple.service <<'EOF'
[Service]
ExecStart=echo hello
EOF
    [[ -e $SYSTEMD_BASE/simple.service ]]
    run systemctl cat simple.service
    [[ "$output" == "# $SYSTEMD_BASE/simple.service
[Service]
ExecStart=echo hello" ]]

    mkDropin simple.service test.conf <<'EOF'
[Service]
ExecStart=
ExecStart=echo override
EOF
    [[ -e $SYSTEMD_BASE/simple.service.d/test.conf ]]
    run systemctl cat simple.service
    [[ "$output" == "# $SYSTEMD_BASE/simple.service
[Service]
ExecStart=echo hello

# $SYSTEMD_BASE/simple.service.d/test.conf
[Service]
ExecStart=
ExecStart=echo override" ]]

    run ! systemctl start simple.service
    run ! systemctl cat bsd.service
}

@test "no kubensenter" {
    mkService simple.service <<'EOF'
[Service]
ExecStart=echo hello
EOF
    export KUBENSENTER="badvalue"

    run ! mkWrapperDropin simple.service
}

@test "Simple service" {
    mkService simple.service <<'EOF'
[Service]
ExecStart=echo hello
EOF

    mkWrapperDropin simple.service
    assertWrapperFor simple.service "echo hello"
}

@test "Multiline service" {
    mkService simple.service <<'EOF'
[Service]
ExecStart=echo \
    hello
EOF

    mkWrapperDropin simple.service
    assertWrapperFor simple.service "echo hello"
}

@test "Simple drop-in" {
    mkService simple.service <<'EOF'
[Service]
ExecStart=echo hello
EOF
    mkDropin simple.service override.conf <<'EOF'
[Service]
Env=FOO=bar
EOF

    mkWrapperDropin simple.service
    assertWrapperFor simple.service "echo hello"
}

@test "ExecStart drop-in" {
    mkService simple.service <<'EOF'
[Service]
ExecStart=echo hello
EOF
    mkDropin simple.service override.conf <<'EOF'
[Service]
ExecStart=
ExecSrart=echo override
EOF

    mkWrapperDropin simple.service
    assertWrapperFor simple.service "echo override"
}

@test "Wrapped drop-in" {
    mkService simple.service <<'EOF'
[Service]
ExecStart=echo hello
EOF
    mkDropin simple.service override.conf <<EOF
[Service]
ExecStart=
ExecSrart=$KUBENSENTER //
    echo override
EOF

    mkWrapperDropin simple.service
    assertWrapperFor simple.service "echo hello"
}

@test "Update Wrapped drop-in" {
    mkService simple.service <<'EOF'
[Service]
ExecStart=echo hello
EOF
    mkDropin simple.service "$EXPECTED_WRAPPER"  <<EOF
[Service]
ExecStart=
ExecStart=$KUBENSENTER //
    echo old
EOF

    mkWrapperDropin simple.service
    assertWrapperFor simple.service "echo hello"
}

@test "Muliple drop-ins" {
    mkService simple.service <<'EOF'
[Service]
ExecStart=echo hello
EOF
    mkDropin simple.service 1.conf <<EOF
[Service]
ExecStart=
ExecSrart=echo level-1
EOF
    mkDropin simple.service 2.conf <<EOF
[Service]
ExecStart=
ExecSrart=echo level-2
EOF
    mkDropin simple.service 3.conf <<EOF
[Service]
Emv=Ognore=me
EOF

    mkWrapperDropin simple.service
    assertWrapperFor simple.service "echo level-2"
}
